package{		import com.bureau.customvideo.*;	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.utils.Timer;    import flash.events.TimerEvent;	import flash.geom.Rectangle;	import flash.events.Event;	import caurina.transitions.Tweener;		public class main extends MovieClip	{		private var videourl:String = root.loaderInfo.parameters.videourl;		private var w:uint = 440;//root.loaderInfo.parameters.w;		private var h:uint = root.loaderInfo.parameters.h;		private var autoplay:String = root.loaderInfo.parameters.autoplay;		private var controls:VideoControl;		private var myVideo:CustomVideoPlayer;		private var bigPlay:bigplay;		//private var debug:Debug;		private var amountLoaded:Number = 0;		private var scaleF:Number = 0;		private var myTimer:Timer;		private var barTimer:Timer;		private var rect:Rectangle;//area to drag progress bar		private var rect1:Rectangle;//area to drag volume bar		private var barHidden:Boolean = false;						public function main():void		{			myVideo = new CustomVideoPlayer(videourl,w,h);			controls = new VideoControl();			bigPlay = new bigplay();			//debug = new Debug();			controls.play_btn.buttonMode = controls.stop_btn.buttonMode = controls.drag.buttonMode = controls.vol_drag.buttonMode = controls.bar.loading_bar.buttonMode = controls.vol_back.buttonMode = bigPlay.buttonMode = true;			controls.play_btn.useHandCursor = controls.stop_btn.useHandCursor = controls.drag.useHandCursor = controls.vol_drag.useHandCursor = controls.bar.loading_bar.useHandCursor = controls.vol_back.useHandCursor = bigPlay.useHandCursor = true;						if(autoplay == "true"){				addChild(myVideo);				addChild(controls);				myVideo.play(videourl);			}else{				addChild(myVideo);				addChild(bigPlay);			}			//addChild(debug);						//debug.debug.text = videourl;						bigPlay.x = w/2 - bigPlay.width/2;			bigPlay.y = h/2 - bigPlay.height/2;			controls.x=0;			controls.y=h-controls.height;			bigPlay.addEventListener(MouseEvent.CLICK, handleBigPlay);			controls.play_btn.addEventListener(MouseEvent.CLICK, clickHandlerPlay);			controls.stop_btn.addEventListener(MouseEvent.CLICK, clickHandlerStop);			controls.drag.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandlerDrag);			stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);			controls.vol_drag.addEventListener(MouseEvent.MOUSE_DOWN, panVolume);			controls.vol_drag.addEventListener(MouseEvent.MOUSE_UP, resetVolume);			controls.bar.loading_bar.addEventListener(MouseEvent.CLICK, clickHandlerLoadBar);			controls.vol_back.addEventListener(MouseEvent.CLICK, clickVolBar);			myTimer = new Timer(100);            myTimer.addEventListener(TimerEvent.TIMER, videoStatus);            myTimer.start();						rect1 = new Rectangle(controls.vol_back.x-controls.vol_back.width,controls.vol_back.y,controls.vol_back.width,0);			stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);		}				private function handleBigPlay(e:MouseEvent):void		{			removeChild(bigPlay);			addChild(controls);			myVideo.play(videourl);		}				private function clickHandlerPlay(e:MouseEvent):void		{			if(controls.play_btn.currentFrame == 1){				myVideo.pause();				controls.play_btn.nextFrame();			}else{				myVideo.resume();				controls.play_btn.prevFrame();			}		}						private function clickHandlerStop(e:MouseEvent):void		{			if(controls.play_btn.currentFrame == 1){				myVideo.pause();				myVideo.seek(0);				controls.play_btn.nextFrame();			}else{				myVideo.seek(0);			}		}				private function videoStatus(e:TimerEvent)		{						//trace(myVideo.getBytesLoaded()+" "+myVideo.getBytesTotal()+ " "+ myVideo.getPlayTime())						amountLoaded = myVideo.getBytesLoaded() / myVideo.getBytesTotal() ;			scaleF = myVideo.getPlayTime() / myVideo.getDuration();			if(scaleF > 0 && scaleF != undefined){				controls.bar.progress_bar.scaleX = scaleF;			}			controls.bar.loading_bar.scaleX = amountLoaded;						controls.drag.x = controls.bar.x + (myVideo.getPlayTime() / myVideo.getDuration() * controls.bar.width) - controls.drag.width;						if(myVideo.getEndPlay() == true){				myVideo.setEndPlay(false);				myVideo.pause();				myVideo.seek(0);				controls.play_btn.nextFrame();			}		}				private function mouseDownHandlerDrag(e:MouseEvent):void		{			rect = new Rectangle(controls.bar.x-controls.drag.width,controls.drag.y,controls.bar.loading_bar.width * controls.bar.loading_bar.scaleX,controls.drag.y-controls.drag.height);			myTimer.stop();			controls.drag.startDrag(false,rect);			stage.addEventListener(Event.ENTER_FRAME,scrubIt);		}		private function mouseUpHandler(e:MouseEvent):void 		{			stage.removeEventListener(Event.ENTER_FRAME,scrubIt);			myTimer.start();			controls.drag.stopDrag();		}		private function scrubIt(e:Event):void		{			controls.bar.progress_bar.scaleX = myVideo.getPlayTime() / myVideo.getDuration();			myVideo.seek(Math.floor( (controls.drag.x - controls.bar.x + controls.drag.width ) * ( myVideo.getDuration() / controls.bar.width) ));		}		private function panVolume(e:MouseEvent):void 		{			controls.vol_drag.startDrag(false,rect1);			stage.addEventListener(Event.ENTER_FRAME,changeVolume);		}		private function resetVolume(e:MouseEvent):void 		{			stage.removeEventListener(Event.ENTER_FRAME,changeVolume);			controls.vol_drag.stopDrag();		}		private function changeVolume(e:Event):void 		{			myVideo.setVolume((controls.vol_drag.x - (controls.vol_back.x - controls.vol_back.width)) /controls.vol_drag.width);		}		private function clickHandlerLoadBar(e:MouseEvent):void 		{			trace(e.target.mouseX);						var seconds:uint = Math.floor(e.target.mouseX * myVideo.getDuration() / e.target.width );			myVideo.seek(seconds);		}		private function clickVolBar(e:MouseEvent):void 		{			var vol:Number = e.target.mouseX / e.target.width ;			myVideo.setVolume(vol);			controls.vol_drag.x = e.target.x + e.target.mouseX - e.target.width;			trace(vol);		}		private function hideBar(e:TimerEvent):void		{						Tweener.addTween(controls,{y:stage.height,time:.5});			barHidden = true;		}		private function showBar():void		{						Tweener.addTween(controls,{y:stage.height-controls.height,time:.5});			barHidden = false;		}		private var counter:uint = 0;				/*function startCounter(){			var c:Number = getTimer();			this.onEnterFrame = function(){				if(getTimer()-4000 > c){					Tweener.addTween(_root.control_bar, {_y:H+5, time:.5, transition:'easeoutstrong'});				}			}					}*/		private var myx:uint;		private var myy:uint;		private function mouseMoveHandler(e:MouseEvent):void		{			//start timer			//get x, y			if(barTimer){				barTimer.removeEventListener(TimerEvent.TIMER, hideBar);			}						myx = e.localX;			myy = e.localY;			counter++;			//trace(myx+" "+counter);			barTimer = new Timer(3000);            barTimer.addEventListener(TimerEvent.TIMER, hideBar);            barTimer.start();			if(barHidden){				showBar();			}		}	}}