<?PHP## ======================================================================= ##   webmatrix                                                     ## ======================================================================= ##   Copyright (c) 2001, 2002, 2003 Stefan Elsner, Workmatrix        ## ======================================================================= ##   <info@workmatrix.de> #### ======================================================================= ## =======================================================================        ## listview_displayInput        ## =======================================================================        ## displays the input form## ======================================================================= function pageview_displayInput($xmldata, $data) {	return "";}## =======================================================================        ##  listview_storeData        ## =======================================================================        ## save the content in the db## ======================================================================= function pageview_storeData($page_id, $identifier) {	return false;}## =======================================================================        ##  listview_getData        ## =======================================================================        ##  get the Data## ======================================================================= function pageview_getData($vPageID,&$page_record) {}## =======================================================================        ##  listview_getMultiData       ## =======================================================================        ##  get the Data for multiple pages## ======================================================================= function pageview_getMultiData($vItems) {}## =======================================================================        ##  listview_deleteData        ## =======================================================================        ##  deletes all text entries of a page## ======================================================================= function pageview_deleteData($vPageID) {}## =======================================================================        ##  output_text        ## =======================================================================        ##  call this function to output an text ## ======================================================================= function pageview_output($item,$structure,&$layout_template,$menu_id,$page_id) {	global $Auth;	## multiclient	$client_id = $Auth->auth["client_id"];		## define the vars	$items = 0;	$item_counter = 1;	$storage = "";				## okay so all we need is the var name and then we generate	## the correct Form fields	## now we should prepare the link for adding an element	## the template var is called: addlinkURL	## store the container	## get the template_id	$db_connectionMain = new DB_Sql();	$db_connectionInner = new DB_Sql();	##	## here we determine what we should search for	if(isset($structure['FIELD'])) {		_listview_getByField($page_id,$db_connectionMain,$structure['FIELD']);	} else {		_listview_getByCategory($page_id,$db_connectionMain,$structure);	}			## get the totat items found	$totalItems = $db_connectionMain->num_rows();		## set the number of items we ouput to the total number	$numberOfItemsToOutput = $totalItems;		## if we want to have page functionality- we expect to have count set	if(isset($structure['COUNT'])) {		$numberOfItemsToOutput = $structure['COUNT'];		if (isset($_GET['offset'])) {			$offset = $_GET['offset'];			##  we want to display the page from its beginning, not the end			if ($offset > 0) {				$offset--;			}			$newcount = ($offset * $numberOfItemsToOutput);			if($newcount < $totalItems) {				$db_connectionMain->seek($newcount);			} else {				$db_connectionMain->seek($totalItems-1);			}		}		}		if(isset($structure['TEMPLATE'])) {		$basename = $structure['TEMPLATE'];		$xmlFile  = $basename.".xml";		$filename = $basename.".tpl";					$container_template = new xmlparser(HTML_DIR.$xmlFile);		$container_template->parse();		## parse the template file and then loop through it		$container_elements = $container_template->getElements();		$objects = $container_template->getObjects();			$container_template = new Template(HTML_DIR);		$container_template->set_templatefile(array("pager" => $filename,"previous" => $filename,"next" => $filename,"head" => $filename,"body" => $filename,"foot" => $filename,"empty" => $filename,"alternate" => $filename, "active" => $filename)); 	}		$db_connectionTemplate = new DB_Sql();	$counter = 1;	$total_counter = 0;	while($db_connectionMain->next_record() && ($item_counter <= $numberOfItemsToOutput)) {		$page_id = $db_connectionMain->Record["page_id"];		##echo $db_connectionMain->Record["template"];				if(!isset($structure['TEMPLATE'])) {			## we should get the template name for the current id			$currentTemplate = $db_connectionMain->Record["template"];			$select_query = "SELECT basename FROM ".PAGE_TEMPLATE." WHERE template_id='$currentTemplate' AND client_id='$client_id'";			$result_pointer = $db_connectionTemplate->query($select_query);			$db_connectionTemplate->next_record();						$basename = $db_connectionTemplate->Record["basename"];			$xmlFile  = $basename.".xml";			$filename = $basename.".tpl";						$container_template = new xmlparser(HTML_DIR.$xmlFile);			$container_template->parse();			## parse the template file and then loop through it			$container_elements = $container_template->getElements();				$objects = $container_template->getObjects();						$container_template = new Template(HTML_DIR);			$container_template->set_templatefile(array("previous" => $filename,"next" => $filename,"head" => $filename,"body" => $filename,"foot" => $filename,"empty" => $filename,"alternate" => $filename, "active" => $filename)); 		}			## okay each page is a row we will ouptut... so first we get the text and set the var		## and second we'll get the images and then we will output the vars					## okay basically what we do, is get all the info for this page:		$page_record = page_getPage($page_id,$objects);			$container_counter = 0;		while($container_counter < count($container_elements)) {			$container_element_name = $container_elements[$container_counter]['NAME'];			$container_element_type = $container_elements[$container_counter]['TYPE'];						switch($container_element_type) {				case 'TEXT': 				case 'COPYTEXT':				case 'DATE': 				case 'LINK':				case 'FILE':				case 'BOX':  				case 'LINKLIST':  				case 'IMAGE': {					$target = strtolower($container_element_type);					if(isset($page_record[$container_element_name])) {						eval("\$element = output_".$target."(\$page_record[\$container_element_name],\$container_elements[\$container_counter],$menu_id,\$version);");						if(is_array($element)) {							$container_template->set_vars($element);						} else {							$container_template->set_var($container_element_name,$element);						}					}					break;				}					case 'INCLUDE' : {					## basically we need to call the function output_"element_type"					## and the output the results to the template										$target = strtolower($container_element_type); 					eval("\$element = output_include('',\$container_elements[\$container_counter],$menu_id,$page_id);");						if(is_array($element)) {						$container_template->set_vars($element);					} else {						$container_template->set_var($container_element_name,$element);					}					break;				}																			default: {					## we need to check if we have a module for this datatype					$target = strtolower($container_element_type);										## first we try to include the apropriate file 					@include_once("datatypes/extra_".$target."/".$target.".php");										## now we check if the function exists					if(function_exists($target."_output")) {												## no we call the function						## check if the page_record entry is defined						## if not we need to pass the whole record						if(isset($page_record[$container_element_name])) {							eval("\$element = ".$target."_output(\$page_record[\$container_element_name],\$container_elements[\$container_counter],$menu_id,\$version);");						} else {							eval("\$element = ".$target."_output(\$page_record,\$container_elements[\$container_counter],\$layout_template,\$menu_id,\$page_id,\$version);");						}							if(is_array($element)) {							$container_template->set_vars($element);						} else {							$container_template->set_var($container_element_name,$element);						}										}					break;				}			}					$container_counter++;		}		##before we will flush this row, we will insert the global		## TARGETPAGE... using this var the user can link the page to		## the associated page		$targetURL = getTargetURL($page_id);		$container_template->set_var('matrix:TARGETPAGE',$targetURL);		$container_template->set_var("matrix:COUNTER", $total_counter);		$container_template->set_var("matrix:PAGENAME", $db_connectionMain->Record["structure_text"]);				## her we shouldd check if we should ouptut different elements		if($container_template->block_items['alternate']) {			if($counter%2) {				if ($structure['HIGHLIGHT'] && $container_template->block_items['active']) {					if ($page_id != $menu_id) {						$storage .= $container_template->fill_block("alternate");					} else {						$storage .= $container_template->fill_block("active");					}				} else {					$storage .= $container_template->fill_block("alternate");				}			} else {				if ($structure['HIGHLIGHT'] && $container_template->block_items['active']) {					if ($page_id != $menu_id) {						$storage .= $container_template->fill_block("body");					} else {						$storage .= $container_template->fill_block("active");					}				} else {					$storage .= $container_template->fill_block("body");				}			}				$counter++;		} else {			if ($structure['HIGHLIGHT'] && $container_template->block_items['active']) {				if ($page_id != $menu_id) {					$storage .= $container_template->fill_block("body");				} else {					$storage .= $container_template->fill_block("active");				}			} else {				$storage .= $container_template->fill_block("body");			}		}				## okay if 		if(isset($structure['COUNT'])) {			$item_counter++;		}		$total_counter++;		$container_template->reset_vars();	}		if(isset($structure['COUNT']) && ($structure['HIDEPAGEELEMENT'] == false || !isset($structure['HIDEPAGEELEMENT']))) {		$page_navigation = internalPageview_dspPageElement($page_id,$db_connectionMain,$totalItems,$numberOfItemsToOutput,$_GET["offset"], $structure['DELTA'],$structure['NAME']);		##$layout_template->set_vars($page_navigation);		$container_template->set_vars($page_navigation);				if($container_template->block_items['pager']) {						### okay we will output the pager if we have more then one page to display			if($totalItems > $structure['COUNT']) {				## okay than output the pager				$pager = $container_template->fill_block("pager");				$container_template->set_var('matrix:PAGER',$pager);			}		}	}		if(is_object($container_template)) {				if($total_counter>=1) {			$head = $container_template->fill_block("head");			$foot = $container_template->fill_block("foot");				return array($structure['NAME'] =>$head.$storage.$foot,'matrix:PAGER'=>$pager);		} else {			$storage = $container_template->fill_block("empty");			return $storage;		}	} else {		return "";	}}## =======================================================================        ##  internalListview_dspPageElement   ## =======================================================================        ##  this function generates the page element####  TODO: ##     - create a abstract function- which is able to handle##       different html styles## ======================================================================= function internalPageview_dspPageElement($page_id,&$db,$totalItems, $itemsPerPage,$offset, $delta,$identifier) {	##  calculate how many pages we have to render		$nrOfPages = ceil($totalItems / $itemsPerPage);	##  load the pager class		require_once ENGINE.'classes/class_html_pager.php';	##  Settings	##	(there are more of'em in the class constructor, these are the most commonly used)		$params['totalItems'] = $totalItems;		$params['perPage'] = $itemsPerPage;		$params['currentPage'] = $offset;		$params['urlVar'] = 'offset';		$params['delta'] = $delta;		$params['prevImg'] = '';		$params['nextImg'] = '';		$pager = &new Html_pager($params);		##  get the rendered page linklist		$links = $pager->getLinks();				## generate the array containing all elements returned		$return = array();		foreach($links as $key=>$val) {			$return[$identifier.'.'.$key] = $val;		}	return $return;}?>